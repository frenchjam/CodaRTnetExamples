/***********************************************************************
 * codaRTNetClient                                                     *
 * network interface definitions for realtime comms                    *
 ***********************************************************************/

#ifndef CODARTCLIENT_H
#define CODARTCLIENT_H

#include "codartapi.h"

#ifdef __cplusplus
extern "C" {
#endif

#define CODANET_AUTODISCOVER_HOSTNAMEMAXLENGTH 1023
#define CODANET_AUTODISCOVER_MAXSERVERS 10
#define CODANET_AUTODISCOVER_SERVERPORTPOOL \
	{ 10200, 10201, 10202, 10203, 10204, 10300, 10301, 10302, 10303, 10304  } 
#define CODANET_AUTODISCOVER_CLIENTLISTENPOOL \
	{ 10500, 10501, 10502, 10503, 10504, 10600, 10601, 10602, 10603, 10604  }

typedef struct CODANET_AUTODISCOVER
{
	DWORD dwNumServers;
	struct
	{
		char hostname[CODANET_AUTODISCOVER_HOSTNAMEMAXLENGTH+1];
		DWORD ip;
		WORD port;
	} server[CODANET_AUTODISCOVER_MAXSERVERS];
} tagCODANET_AUTODISCOVER;

/**codanet_getlasterror
   Summary
   Retrieve most recent error code generated by network
   functions.
   
   Description
   If another function indicates that a network error has
   occured, this function may be used to retrieve an error code
   which gives more information about what went wrong.   
   
   @return The error code most recently produced, or CODANET_OK
   if no error has been produced since startup or since the most
   recent call to codanet_clearlasterror().

   @retval CODANET_OK                         No network error has been detected since startup
                                              or since the most recent call to
                                              codanet_clearlasterror (whichever happened more
                                              recently).
   @retval CODANET_SOCKETERROR_BROKEN         Connection to the server has been lost. The server
                                              program may have been stopped or there is some
                                              problem with physical network connections, or an
                                              invalid socket was used.
   @retval CODANET_SOCKETERROR_CREATE         A network socket for connection to the server
                                              could not be created. This implies some problem
                                              with the operating system or network library.
   @retval CODANET_SOCKETERROR_HOSTNAME       The specified host name or IP address for the
                                              server could not be found.
   @retval CODANET_SOCKETERROR_CONNECT        Could not connect to server. This may be because
                                              the server is not running, because the port or
                                              network address are incorrect, or because there is
                                              some problem with the physical network connection.
   @retval CODANET_SOCKETERROR_TCPOPTIONS     Could not set appropriate options for network
                                              communication. This indicates that the installed
                                              network library does not support the options
                                              required for fast connection to the server.
   @retval CODANET_SOCKETERROR_BADNUMMODULES  An unexpected number of modules was indicated when
                                              downloading status information. This is the result
                                              of a network failure or problem with the server
                                              program.
   @retval CODANET_SOCKETERROR_STREAMCREATE   A UDP network socket for receiving realtime data
                                              could not be created. This implies some problem
                                              with the operating system or network library.
   @retval CODANET_SOCKETERROR_STREAMPORT     Could not create a UDP stream for receiving
                                              realtime data on the specified port. This may be
                                              because a stream has already been created using
                                              the given port number and not properly closed
                                              before program exit.                               
	 @retval CODANET_CLIENTPROTOCOLERROR_TOOBIG Data received from the server was greater than expected.
	 @retval CODANET_CLIENTPROTOCOLERROR_NOHEADER Packet header information invalid or not present ( for realtime streams ).
*/
DWORD CODANET_API codanet_getlasterror();

/**codanet_clearlasterror
   Summary
   Reset network error information
   
   Description
	 This function may be used to reset the error flag after an error has occured.
	 codanet_getlasterror therefore indicates whether an error has occured since the last call to 
	 this function, or since the start of execution, whichever happened more recently.
*/
void CODANET_API codanet_clearlasterror();

/**codanet_autodiscover
   Summary
   Attempt to find Codamotion Realtime Network servers on the network.
   
   Description
	 This will use a UDP auto-discovery protocol to attempt to find all available
	 Codamotion Realtime Network servers which are attached.  The
	 results are placed in a CODANET_AUTODISCOVER structure.  No error
	 flags are set by this function.  If it failed to find any
	 servers, the dwNumServers member of CODANET_AUTODISCOVER will be
	 zero.  If this happens it may be because servers are down or not connected.

	 @param discover structure to be filled with array of available servers

*/
void CODANET_API codanet_autodiscover(struct CODANET_AUTODISCOVER* discover);

/**codanet_connect
   Summary
   Connect to Codamotion Realtime Network Server
   
   Description
	 Create a connection to the Codamotion realtime server.  The value returned by this
	 function can then be used in subsequent system commands.  The server IP and port
	 number are usually obtained automatically using codanet_autodiscover. 

	 @param ip IP address of server
	 @param port server port on which to connect

	 @return CODANET_SOCKET_ERROR if an error occured, otherwise a valid socket value. 
	         If there was an error then an error code can be retrieved using 
					 codanet_getlasterror.
*/
CODANET_SOCKET CODANET_API codanet_connect(unsigned long ip, unsigned short port);

/**codanet_disconnect
   Summary
   Disconnect from Codamotion Realtime Server
   
   Description
	 Call this prior to program termination to free resources allocated during a
	 call to codanet_connect.
	 @param skt The connection created using codanet_connect.
*/
void CODANET_API codanet_disconnect(CODANET_SOCKET skt);

/**codanet_sendbytes
   Summary
   Send data to Codamotion Realtime Server
   
   Description
	 Send data to Codamotion Realtime Server.
	 Should not be called directly - use C++ wrapper clases.

	 @param skt The connection created using codanet_connect.
	 @param dwSize Size of data to send (in bytes).
	 @param data Data buffer to send (must be of at least dwSize bytes)

	 @return zero if data was sent successfully, non-zero error code otherwise.
	         If there was an error then an error code can be retrieved using 
					 codanet_getlasterror.
*/
int  CODANET_API codanet_sendbytes(CODANET_SOCKET skt, DWORD dwSize, const BYTE* data);

/**codanet_sendbytes
   Summary
   Receive data from Codamotion Realtime Server
   
   Description
	 Send data to Codamotion Realtime Server.
	 Should not be called directly - use C++ wrapper clases.
	 @param skt The connection created using codanet_connect.
	 @param dwSize Size of data to receive (in bytes).
	 @param data Data buffer for received data (must be of at least dwSize bytes).

	 @return zero if data was sent successfully, non-zero error code otherwise.
	         If there was an error then an error code can be retrieved using 
					 codanet_getlasterror.
*/int  CODANET_API codanet_receivebytes(CODANET_SOCKET skt, DWORD dwSize, BYTE* data);


/**codanet_sleep@DWORD
   Summary
   Wait for a period of time
   
   Description
   Cause the calling thread to wait (pause execution) for at
   least the specified number of milliseconds. In MS Windows
   this maps to the Win32 function Sleep().

   @param millseconds  The number of milliseconds to wait
 */
void CODANET_API codanet_sleep(DWORD milliseconds);

DWORD CODANET_API codanet_ntohl(DWORD x);
DWORD CODANET_API codanet_htonl(DWORD x);
WORD CODANET_API codanet_ntohs(WORD x);
WORD CODANET_API codanet_htons(WORD x);

float CODANET_API codanet_ntohf(float x);
float CODANET_API codanet_htonf(float x);

double CODANET_API codanet_ntohd(double x);
double CODANET_API codanet_htond(double x);

void CODANET_API codanet_fixedstring_ntoh(DWORD dwLength, wchar_t* str);
void CODANET_API codanet_fixedstring_hton(DWORD dwLength, wchar_t* str);


/* Network Error Codes */
#define CODANET_OK 0
#define CODANET_SOCKETERROR_BROKEN 1
#define CODANET_SOCKETERROR_WINDOWSDLL 2
#define CODANET_SOCKETERROR_CREATE 3
#define CODANET_SOCKETERROR_HOSTNAME 4
#define CODANET_SOCKETERROR_CONNECT 5
#define CODANET_SOCKETERROR_TCPOPTIONS 6
#define CODANET_CLIENTPROTOCOLERROR_BADNUMSTATUS 7 
#define CODANET_SOCKETERROR_STREAMCREATE 8
#define CODANET_SOCKETERROR_STREAMPORT 9
#define CODANET_CLIENTPROTOCOLERROR_TOOBIG 10
#define CODANET_STREAMTIMEOUT 11
#define CODANET_CLIENTPROTOCOLERROR_BADNUMCONFIG 12
#define CODANET_CLIENTPROTOCOLERROR_BADSTRINGLENGTH 13
#define CODANET_CLIENTPROTOCOLERROR_BADNUMDEVICES 14 
#define CODANET_CLIENTPROTOCOLERROR_BADSTRUCTSIZE 15
#define CODANET_SOCKETERROR_STREAMHOSTIP 16

#ifdef __cplusplus
}
#endif

#endif
